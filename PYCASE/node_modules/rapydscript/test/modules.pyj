module math:
    pi = Math.PI

    a = "foo"
    a += "bar"

    counter = 0
    def inc_counter():
        nonlocal counter
        counter += 1
    def get_counter():
        return counter

    class Counter:
        def __init__(self):
            self.counter = 0
        def inc(self):
            self.counter += 1

# access to module's internal variables
assert.equal(math.pi, Math.PI)
assert.equal(math.a, "foobar")

# access to module's internal functions
assert.equal(math.counter, 0)
math.inc_counter()
assert.equal(math.counter, 0)       # import-time constant
assert.equal(math.get_counter(), 1) # actual value of math.counter

# access to module's internal classes and class auto-detection
c = math.Counter()
assert.equal(c.counter, 0)
c.inc()
assert.equal(c.counter, 1)

# module decorators
@external
module test:
    pass

assert.throws(
    def():
        test
    ,
    /test is not defined/
)

def has_item(m):
    m.item = "an item"
    return m

@has_item
module blank:
    pass

assert.equal(blank.item, "an item")

# nesting
module world:
    module country:
        co = 'US'
        module city:
            ct = 'Cupertino, CA'
            module zipcode:
                z = '95014'
                class House:
                    def __init__(self, address):
                        self.addr = address
                    def get_address(self):
                        return [self.addr, ct, z, co].join(', ')


apple_hq = world.country.city.zipcode.House('1 Infinite Loop')
assert.equal(apple_hq.get_address(), '1 Infinite Loop, Cupertino, CA, 95014, US')
